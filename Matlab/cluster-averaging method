clc; clear all; close all;

% Initially open a prerecoreded file instead of real-time audio input.
[y,Fs] = audioread('sample.wav');
info = audioinfo('sample.wav')
figure();
plot(y);
sound(y,Fs);
pause(5);

% Apply a bandpass filter for vocal range.
ord = 10;
pass_rppl = 1;
stop_attn = 50;
pass_freq = 500 / (Fs/2);
stop_freq = 5000 / (Fs/2);
[b,a] = ellip(ord, pass_rppl, stop_attn, [pass_freq, stop_freq], 'bandpass');
f_sig = filter(b, a, y);
audiowrite('sample.wav',f_sig,Fs);
figure();
plot(f_sig);
sound(f_sig*3,Fs);
pause(5);

% Obtain the output of from the filter and apply cluster averaging method.
% Take 100 Clusters per Second with 100 samples per Cluster
% This gives 1 Cluster of 100 Samples for 1/100 of a Second, ie, 100 mSec

count = 0;
sig_out = [];
out = [];

means = [0 0 0 0 0];

% Scalar Kalman Filter Initializations
x_mean_int = 0; % state - take the mean intensity
p = 0; % initial covariance - take as 0 since the noise is zero-mean
q = 1;
r = 1;
k = 0;
X = [];

% % take first cluster of 100 samples
% sig = y((count*100)+1:(count*100)+100);
% % filter the signal obtained
% % f_sig = filter(b, a, sig);
% % obtain the signal stats
% % curr_stats = [max(f_sig) min(f_sig) mean(f_sig) std(f_sig) var(f_sig)]
% curr_stats = [max(sig) min(sig) mean(sig) std(sig) var(sig)];
% prev_stats = curr_stats;

% Make a separate stat for noise before signal started and use that for
% current cluster stats matching.

while(count<500-1)
    
    % % Statistics Calculation
    sig = y((count*100)+1:(count*100)+100);
    % f_sig = filter(b, a, sig);
    % curr_stats = [max(f_sig) min(f_sig) mean(f_sig) std(f_sig) var(f_sig)];
    curr_stats = [max(sig) min(sig) mean(sig) std(sig) var(sig)];
    prev_stats = curr_stats;
    
    % % Information of Previous Five States
    means(5) = prev_stats(3);
    means(4) = means(5);
    means(3) = means(4);
    means(2) = means(3);
    means(1) = means(2);
    
    % % Kalman Prediction
    % x_mean_int = x_mean_int;
    p = p + q;
    k = p/(p + r);
    x_mean_int = x_mean_int + (k*(curr_stats(3)-x_mean_int));
    X = x_mean_int; % amplify here if required
    p = (1-k)*p;
    
    % % Noise Chop-off Method
    
    % % DO NOT USE
    % if ((X < (prev_stats(3)+0.0005)) && (X > (prev_stats(3)-0.0005)))
        % out = zeros(100,1);
    % else
        % out = sig;
    % end
    
    % % DO NOT USE
    % if (curr_stats(1) > 0.01 && curr_stats(2) < -0.01)
        % out = f_sig;
        % out = sig;
    % else
        % out = zeros(100,1);
    % end
    
    % % Transform output to 1 x M matrix.
    sig_out = [sig_out out'];
    
    count = count + 1;
    
end

% Transform output to 1 x M matrix.
sig_out = sig_out';

% write the filtered signal to file
audiowrite('sample_unfilt.wav',sig_out,Fs);
% figure();
% sound(sig_out*2,Fs);
% plot(sig_out);
pause(5);

% bandpass filtering after noise chopoff
f_sig = filter(b, a, sig_out);
f_sig = f_sig * 2; % amplify here
audiowrite('sample_filt.wav',f_sig,Fs);
% figure();
% plot(f_sig);
% sound(f_sig,Fs);
pause(5);
